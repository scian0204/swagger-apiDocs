openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
- name: Apart
  description: 아파트 API
- name: User
  description: 유저 API
- name: Report
  description: 소음신고 API
paths:
  /api/users/modify:
    put:
      tags:
      - User
      summary: 유저 정보 수정
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseUser'
      x-swagger-router-controller: User
  /api/Report/update:
    put:
      tags:
      - Report
      operationId: updateBoard
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
        required: true
      responses:
        "200":
          description: OK
      x-swagger-router-controller: Report
  /api/users/signup:
    post:
      tags:
      - User
      summary: 회원가입
      operationId: signUp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseUser'
      x-swagger-router-controller: User
  /api/users/login:
    post:
      tags:
      - User
      summary: 로그인
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseString'
      x-swagger-router-controller: User
  /api/users/delete:
    post:
      tags:
      - User
      summary: 회원 탈퇴
      operationId: deleteUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        default:
          description: "탈퇴 성공: 2<br>탈퇴실패-로그인돼있는 id와 다름: 0<br>탈퇴실패-id는 맞지만 pw틀림: 1"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseObject'
      x-swagger-router-controller: User
  /api/apart/regist:
    post:
      tags:
      - Apart
      operationId: registApart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApartInfoRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApartInfo'
      x-swagger-router-controller: Apart
  /api/apart/ho:
    post:
      tags:
      - Apart
      summary: 아파트 동 별 호 목록 API
      description: 아파트ID와 동으로 호 목록 검색하는 API
      operationId: getHoList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HoRequest'
        required: true
      responses:
        default:
          description: 아파트 동 별 호 목록 리스트
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
                x-content-type: '*/*'
      x-swagger-router-controller: Apart
  /api/Report/write:
    post:
      tags:
      - Report
      operationId: insertBoard
      parameters:
      - name: file
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: binary
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
        required: true
      responses:
        "200":
          description: OK
      x-swagger-router-controller: Report
  /api/Report/delete:
    post:
      tags:
      - Report
      operationId: deleteBoardPost
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
      x-swagger-router-controller: Report
  /api/users/logout:
    get:
      tags:
      - User
      summary: 로그아웃
      operationId: logout
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseString'
      x-swagger-router-controller: User
  /api/users/isLogin:
    get:
      tags:
      - User
      summary: 로그인 여부 확인
      operationId: isLogin
      responses:
        default:
          description: "로그인 상태: 해당 아이디 세션<br>로그아웃 상태: null"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseString'
      x-swagger-router-controller: User
  /api/users/isIdDup/{userId}:
    get:
      tags:
      - User
      summary: 아이디 중복 체크
      operationId: isIdDup
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseBoolean'
      x-swagger-router-controller: User
  /api/apart/{apartName}:
    get:
      tags:
      - Apart
      summary: 아파트 목록 API
      description: 아파트 이름으로 아파트 목록 검색하는 API
      operationId: getApartList
      parameters:
      - name: apartName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseListApartInfo'
      x-swagger-router-controller: Apart
  /api/apart/dong/{apartId}:
    get:
      tags:
      - Apart
      summary: 아파트별 동 목록 API
      description: 아파트ID로 동 목록 검색하는 API
      operationId: getDongList
      parameters:
      - name: apartId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        default:
          description: 아파트 별 동 목록 리스트
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
                x-content-type: '*/*'
      x-swagger-router-controller: Apart
  /api/Report/{idx}:
    get:
      tags:
      - Report
      operationId: viewBoard
      parameters:
      - name: idx
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Report'
      x-swagger-router-controller: Report
  /api/Report/list:
    get:
      tags:
      - Report
      operationId: getAllBoardsDESC
      parameters:
      - name: pageable
        in: query
        required: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageReport'
      x-swagger-router-controller: Report
  /api/Report/list/ASC:
    get:
      tags:
      - Report
      operationId: getAllBoardsASC
      parameters:
      - name: pageable
        in: query
        required: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageReport'
      x-swagger-router-controller: Report
  /:
    get:
      tags:
      - home-controller
      operationId: test
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
      x-swagger-router-controller: HomeController
components:
  schemas:
    UserRequest:
      type: object
      properties:
        userId:
          type: string
        userName:
          type: string
        password:
          type: string
    Error:
      type: object
      properties:
        errorId:
          type: integer
          format: int32
        message:
          type: string
      example:
        errorId: 0
        message: message
    ResponseUser:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
        data:
          $ref: '#/components/schemas/User'
      example:
        data:
          password: password
          telNum: telNum
          regDate: 2000-01-23T04:56:07.000+00:00
          isAdmin: isAdmin
          userName: userName
          userId: userId
        error:
          errorId: 0
          message: message
    User:
      type: object
      properties:
        userId:
          type: string
        userName:
          type: string
        password:
          type: string
        telNum:
          type: string
        isAdmin:
          type: string
        regDate:
          type: string
          format: date-time
      example:
        password: password
        telNum: telNum
        regDate: 2000-01-23T04:56:07.000+00:00
        isAdmin: isAdmin
        userName: userName
        userId: userId
    LoginRequest:
      type: object
      properties:
        userId:
          type: string
        password:
          type: string
    ResponseString:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
        data:
          type: string
      example:
        data: data
        error:
          errorId: 0
          message: message
    ResponseObject:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
        data:
          type: object
      example:
        data: {}
        error:
          errorId: 0
          message: message
    ApartInfoRequest:
      type: object
      properties:
        apartName:
          type: string
        location:
          type: string
    ApartInfo:
      type: object
      properties:
        apartId:
          type: integer
          format: int32
        apartName:
          type: string
        location:
          type: string
      example:
        apartName: apartName
        apartId: 0
        location: location
    HoRequest:
      type: object
      properties:
        apartId:
          type: integer
          format: int32
        dong:
          type: string
    ResponseBoolean:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
        data:
          type: boolean
      example:
        data: true
        error:
          errorId: 0
          message: message
    ResponseListApartInfo:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
        data:
          type: array
          items:
            $ref: '#/components/schemas/ApartInfo'
      example:
        data:
        - apartName: apartName
          apartId: 0
          location: location
        - apartName: apartName
          apartId: 0
          location: location
        error:
          errorId: 0
          message: message
    Report:
      type: object
      properties:
        idx:
          type: integer
          format: int32
        userId:
          type: string
        reportDate:
          type: string
          format: date-time
        occurDate:
          type: string
          format: date-time
        detail:
          type: string
        isCheck:
          type: string
      example:
        isCheck: isCheck
        reportDate: 2000-01-23T04:56:07.000+00:00
        detail: detail
        idx: 0
        userId: userId
        occurDate: 2000-01-23T04:56:07.000+00:00
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    PageReport:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Report'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
      example:
        number: 5
        size: 1
        last: true
        numberOfElements: 5
        totalPages: 6
        pageable:
          paged: true
          pageNumber: 9
          offset: 2
          pageSize: 7
          unpaged: true
          sort: null
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - isCheck: isCheck
          reportDate: 2000-01-23T04:56:07.000+00:00
          detail: detail
          idx: 0
          userId: userId
          occurDate: 2000-01-23T04:56:07.000+00:00
        - isCheck: isCheck
          reportDate: 2000-01-23T04:56:07.000+00:00
          detail: detail
          idx: 0
          userId: userId
          occurDate: 2000-01-23T04:56:07.000+00:00
        first: true
        totalElements: 0
        empty: true
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        pageSize:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
      example:
        paged: true
        pageNumber: 9
        offset: 2
        pageSize: 7
        unpaged: true
        sort: null
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
      example:
        unsorted: true
        sorted: true
        empty: true
